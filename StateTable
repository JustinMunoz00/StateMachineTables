import java.util.ArrayList;

public class StateTable {
    private final int numVars;
    private final ArrayList<String> words = new ArrayList<String>();
    private ArrayList<String> chars = new ArrayList<String>();
    private ArrayList<int[]> results = new ArrayList<int[]>();

    public StateTable (ArrayList<String> words) {
        // sets word list
        for (String s : words) {
            this.words.add(s);
        }

        //sets chars list
        for (String s : words) {
            for (int i = 0; i < s.length(); i++) {
                String c = s.substring(i, i + 1);
                if (!this.chars.contains(c)) {
                    chars.add(c);
                }
            }
        }

        // sorts chars list in alphabetical order
        for (int i = 0; i < chars.size(); i++) {
            String c1 = chars.get(i);
            int newIndex = i;
            for (int j = i + 1; j < chars.size(); j++) {
                if (numVal(chars.get(j)) < numVal(chars.get(newIndex))) {
                    newIndex = j;
                }
            }
            if (newIndex != i) {
                chars.set(i, chars.get(newIndex));
                chars.set(newIndex, c1);
            }
        }

        // sets numVars
        if (Math.log(chars.size())/Math.log(2) > (int) (Math.log(chars.size())/Math.log(2))) numVars = (int) (Math.log(chars.size())/Math.log(2)) + 1;
        else numVars = (int) (Math.log(chars.size())/Math.log(2));

        // Creates a results list with all values equal to 2 because 2 will never be included in this list which makes it easier to identify which states go unused
        for (int i = 0; i < numVars; i++){
            results.add(new int[(int) Math.pow(2, numVars+1)]);
        }
        for (int i = 0; i < results.size(); i++) {
            for (int j = 0; j < results.get(i).length; j++){
                results.get(i)[j] = 2;
            }
        }
    }

    public void dValues() {
        String w1 = words.get(0);
        String w2 = words.get(1);
        int length = results.get(0).length/2;
        for (int i = 0; i < length; i++){
                int d;
                if (i >= chars.size() || w1.indexOf(chars.get(i)) == w1.length()-1 || !w1.contains(chars.get(i))){
                    d = chars.indexOf(w1.substring(0, 1));
                } else {
                    String c = chars.get(i);
                    d = chars.indexOf(w1.substring(w1.indexOf(c) + 1, w1.indexOf(c) + 2));
                }
                for (int k = 1; k <= numVars; k++) {
                    results.get(numVars - k)[i] = d % 2;
                    d = d/2;
                }
        }
        for (int i = 0; i < length; i++){
            int d;
            if (i >= chars.size() || w2.indexOf(chars.get(i)) == w2.length() - 1 || !w2.contains(chars.get(i))){
                d = chars.indexOf(w2.substring(0, 1));
            } else {
                String c = chars.get(i);
                d = chars.indexOf(w2.substring(w2.indexOf(c) + 1, w2.indexOf(c) + 2));
            }
            for (int k = 1; k <= numVars; k++) {
                results.get(numVars - k)[i + length] = d % 2;
                d = d/2;
            }
        }
    }

    // helps when sorting character list
    private int numVal(String c){
        return Character.getNumericValue(c.charAt(0)) - 9;
    }

    // helps when choosing D values
    private int numVal(String str, int i){
        return Character.getNumericValue(str.charAt(i)) - 9;
    }

    public void printChars(){
        for (String s : chars) {
            System.out.print(s+" ");
        }
        System.out.println();
    }

    public void results(){
        for (int i = 0; i < numVars; i++) {
            System.out.print("D" + (numVars - i - 1) + " ");
        }
        System.out.println();
        for (int c = 0; c < (int) Math.pow(2, numVars + 1); c++) {
            for (int r = 0; r < results.size(); r++) {
                System.out.print(results.get(r)[c] + "  ");
            }
            System.out.println();
        }
    }

}